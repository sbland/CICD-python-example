# Based on workflow here: https://hsf-training.github.io/hsf-training-singularity-webpage/09-bonus-episode/index.html
# And this one for release: https://github.com/ruby/ruby-dev-builder/blob/b0bf59a17c17985d4692243d4689c273f6348fa5/.github/workflows/build.yml#L177-L181
name: Build Apptainer Image

on:

  push:
    tags:
      - 'v*'

    branches:
      - main
      - ci
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-source:
    # TODO: Finish implementing build and upload of source distribution
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    name: Build Source Distribution
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "0.5.13"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        uv sync --extra build
    - name: Build Source with UV
      run: |
        uv build
    - name: Upload source distribution artifact
      uses: actions/upload-artifact@v4
      with:
        name: built-source
        path: dist
  build-apptainer:
    needs: build-source
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
    container:
        image: ghcr.io/apptainer/apptainer:1.4.1
        options: --privileged

    name: Build Apptainer Image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built source distribution artifact
        uses: actions/download-artifact@v5
        with:
          name: built-source
          path: ./dist
      - name: Build Apptainer default image
        run: |
          apptainer build apptainer.sif apptainer.def
      - name: Upload Apptainer image artifact
        uses: actions/upload-artifact@v4
        with:
          name: apptainer.sif
          path: apptainer.sif
  create_release:
    runs-on: ubuntu-latest

    needs: build-apptainer

    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    permissions:
      contents: write
      packages: write

    name: Create Release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built source distribution artifact
        uses: actions/download-artifact@v5
        with:
          name: built-source
          path: ./dist
      - name: Download Apptainer image artifact
        uses: actions/download-artifact@v5
        with:
          name: apptainer.sif

      - name: Set tag name
        id: tag
        run: |
          if [[ "${{ github.event_name }}" != "push" ]]; then
            tag=v$(date +%Y%m%d.%H%M%S)
          else
            tag=$(basename "${{ github.ref }}")
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
      # - name: Create a Release
      #   uses: elgohr/Github-Release-Action@v5
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     title: MyReleaseMessage
      #     tag: ${{ github.ref_name }}
      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: |
          tag="${{ steps.tag.outputs.tag }}"
          body="release example for apptainer image and source distribution"
          gh release create --draft "$tag" --title "$tag" --notes "$body"

      - name: Upload Source Distribution to Release
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: |
          tag="${{ steps.tag.outputs.tag }}"
          gh release upload "$tag" ./dist/*
      - name: Upload Apptainer Image to Release
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: |
          tag="${{ steps.tag.outputs.tag }}"
          gh release upload "$tag" ./apptainer.sif

  publish:
    name: Publish Release
    needs: create_release
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - name: Publish Release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: gh release edit ${{ needs.create_release.outputs.tag }} --draft=false